Title: File formats

Section: Animation description file (.adf)
This is an extremely simple format which describes a number of animations in the following format.

(start example)
start
name
Image 1
Image 2
...
Image n
end
(end)

Example:
(start example)
start
up
Gryphon_fly_u1.png
Gryphon_fly_u2.png
end
(end)

Section: Tileset (.tileset)
Describes a tileset. First line is just the path to an image containing tile graphics.
Second line gives tile dimentions.

Example:
(start example)
media/tileset_placeholder.png
32 32
(end)

Section: Map (.map)
Describes everything on a map. Including tilemap layers, collision map and entities in chunks.

Topic: Tilemap layer chunk
Starts with a line just saying "layer" telling the loader that a layer chunk is coming.
Then a path to the tileset file this layer uses.

Then the dimensions of the map followed by a sequence of numbers indexing tiles in the tileset. It doesn't matter if these numbers are formatted as in the example, but it makes it easier to visualize the map.

Example:
(start example)
layer
media/test.tileset
7 7
14 14 14 14 14 14 14
14 0 0 0 0 0 14
14 0 0 0 0 0 14
14 0 0 14 0 0 14
14 0 0 0 0 0 14
14 0 0 0 0 0 14
14 14 14 14 14 14 14
(end)

Topic: Collision map
This is quite similar to a tilemap layer. But at the time of this writing it doesn't link to a tileset and it is only binary. You can either walk on a tile or not. 1 means blocked, 0 means walkable. Since there is no tileset to give dimensions of a tile, it is given directly. In the example you can see that map dimensions are 7, 7 and tile dimensions is 32, 32.

Example:
(start example)
obstaclemap
7 7
32 32
1 1 1 1 1 1 1
1 0 0 0 0 0 1
1 0 0 0 0 0 1
1 0 0 1 0 0 1
1 0 0 0 0 0 1
1 0 0 0 0 0 1
1 1 1 0 1 1 1
(end)

Topic: Entities
The map also supports entities. That is objects that are scriptable, they can be just about anything you need in the game. The format is very simple, like a config file, a set of attribute = value statements. Each attribute is dealt with in different ways in the engine. You do not have to worry about the order, the engine takes care of dealing with them in the right order.

Example:
(start example)
<entity>
x = 192
y = 192
interact = Maploader
map = media/test2.map string
</entity>
(end)

Enumeration: Attributes
x - Horizontal position
y - Vertical position
interact - script triggered on interaction
update - script triggered on update
use - script triggered on use

All other attributes, that are not used in the engine, are passed on to Lua. The lua state has a table called "this" in which any kind of attributes can be set for entities. In the example here's an attribute "map" with the value "media/test2.map string". The engine extracts the "string" part to know what type of value to send to lua, then it sets this[entity]["map"] to "media/test2.map" which can then be used in lua.
